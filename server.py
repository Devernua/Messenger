import asyncore
import socket
import json
from .diffiehellman.diffiehellman import DiffieHellman

clients = {}

users = {}
users["Anya"] = "123"
users["Titto"] = "1211"

#public_key = 469858230554226894734634170402458601662299371464812943089810269803481478334049048632891032745651140813050159883674231214713515571901657975234442011541255904090633066350187067852036856905798841434938391798570012353674092240026281864246060722444503664731823492876407319423960674487141757010784706853770261183743398999291897445959696164816699208283893391966729215030610194847957562318674487437329577363953012410215859615021163540843601001897150546843616846674994743469940528583357122773924767380972198235369777578010446801324161936526795049996733589052299861210315611191717034642596871654149931988651301965408425130814237075043649548844174011949620613427556197173076178638252723241746100610096747173060888411050786139211670400276049494467774114500893772150073255019339102775099807265927326587927070193946583408421691695810114406159931240411984234814101979352420711523042080794772889208426427108774548247501711092267361858454205534323958680739723356730047293636237943739614992092980658025296622265441510368720565917618373161950475429326550564482885111073552290293779353632034542171487794164068323688372626079790653332626566492211546066242964075312181494095293452154865684581366513199942278510702225639755713717079364337309587329751628017220517344644206339210195123399332263675740266620520979669417892680522389403364552767184826011736333242524997733990363878163514524162022990841698850619164189360735726677884470716643191346859010812806086009388018170337953262054150483025496214724615489393040513759652101186201818694847396521686438440384465370503394385444718906995232132391939096003793805771476651831983925262426842555258697431441607199612832536788930670006788797342526083548508733293704727448119701986713813843525848219952111299573369724412112446746787852642033593166182093880128823314605397045818153011232878791371434954803649737601631843544008195881935040473725553828255168950671692146341980201396771781972760003662441102728324646512636916052450934801167534586440592757841705244938048401023623652746822772135298126149581484792106736385261675620690371097810713490390595557609706784402242705701850824719057274117175209313588029319138039502312918928711601088881908693832609026868297985622789586695962729333106971051559956750823891053924783396219195075034063491105817171895292696505788373281350292803665473772880657585904346482540492673674728895747008421087595704676393205872998567289612660434460405452713491093419986173773744042047489343464713286879987500652456053406485
#private_key = 1296480062556501777678486169107181817882728842333814836609473678201228371117911444239885976469942768291950465197596267946112629762229255122491004164199276791842237672632166376541658734770556200924126117521207922682816923302751031342573050735044656398232015702164295013344243784204735344178952885342078318730394025006826218145367



class MessageHandler(asyncore.dispatcher_with_send):
    def __init__(self, sock):
        asyncore.dispatcher_with_send.__init__(self, sock)
        self.name = 0

    def handle_read(self):
        data = self.recv(4096).decode('utf-8')
        if data:
            print("loginfo: " + data)
            j = json.loads(data)

            if j["action"] == "register":
                try:
                    if not j["data"]["login"] in users.keys():

                            users[j["data"]["login"]] = j["data"]["pass"]
                            self.name = j["data"]["login"]
                            clients[self.name] = self
                            self.send(json.dumps({"action": "register", "status": "AUTH_OK"}).encode())
                    else:
                        self.send(json.dumps({"action": "register", "status": "AUTH_ERR"}).encode())
                        self.close()
                except Exception:
                    self.send(json.dumps({"action": "register", "status": "AUTH_ERR"}).encode())
                    self.close()

            elif j["action"] == "auth":
                try:
                    if users[j["data"]["login"]] == j["data"]["pass"]:
                        self.name = j["data"]["login"]
                        clients[self.name] = self
                        self.send(json.dumps({"action": "auth", "status": "AUTH_OK"}).encode())
                    else:
                        self.send(json.dumps({"action": "auth", "status": "AUTH_ERR"}).encode())
                        self.close()
                except Exception:
                    self.send(json.dumps({"action": "auth", "status": "AUTH_ERR"}).encode())
                    self.close()

            elif j["action"] == "message":
                try:
                    clients[j["data"]["to"]].send(json.dumps({"action": "message", "data":{"from": self.name, "message": j["data"]["message"]}}).encode())
                except Exception:
                    self.send(json.dumps({"action": "message", "status": "MESSAGE_ERR"}).encode())
            else:
                print("WATAFA")


class MessangerServer(asyncore.dispatcher):
    def __init__(self, host, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)

    def handle_accept(self):
        pair = self.accept()
        if pair is not None:
            sock, addr = pair
            print('Incoming connection from %s' % repr(addr))
            MessageHandler(sock)


server = MessangerServer('', 7777)
asyncore.loop()
