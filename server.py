import asyncore
import socket
import json
from .diffiehellman.diffiehellman import DiffieHellman

clients = {}

users = {}
users["Anya"] = "123"
users["Titto"] = "1211"

#public_key = 114383279109091133926410990404063862402795788216030891760942524455192014111018560148683975809779353885973236622385269426955265334607135071717414151934133994308510708459709367818298849857510317681619067525996413895359626000755442628812052128424270833227567896853376614807020141013248622059718001414374578213581414349144447588331356321036154746588113947378932691094092374404188828460211672376179496771827295516889020752392114644179379624033626217381470268711308352605891868930148486734130456145483912009617800917706317918091781314682662906227538277621038780514464084556932198405933842025846075025334671361607009264463372883264419024819703258825983626898783933597937035517813186366742861011287815029155951560704767302059920054839983538788615062311362244827311030713917331348491360050526933386358151921768285126438214711814551884527693835456065937043861458419478187037657122791006881380429668267693508300902935489076771998198873495143782573948731025252977366581026050583615803289120215832776581952183487281917243326950652695332074649110954057665945885116745666625948458459549554967621053049690223269218728388418403539902870403346800058450960607731508422694255758366792643630533998778035856566767035014686849811036368543100094995801936332146903950032453414870401152817430634095097564808267133131765156592119768074659552228638717975121991147115761654572867071883314518147863011203001089814723545902434215972332390824531921481784958800955383932627232140075595372531935474475606175053352036799497855494369260870824754117353398135525477830850846245870270218429367615045574471145220905085833583860233370180753188959897168507434808916588255789729440429626597274999357447032971636725109174972549726105569799151429251788129694038127722197192289632845425749021565819200477294051029245999674990836482887752186351451355760365707133953278652578351477680745201603981571460664881576820785984468298390397011630916115676908458432193749025244313210013068938178798140456073801178632080068497424110470200126091630686848871794320016764230287004973022572712459850762475336143589950575398584628296378330103387856142921895721759301663462519135168047273225066090731101835840172542282356982538043721581044903974863378870985131275187632794736893245843090694253909651923799092644928876870137780388104744552085946332391226384160781188493387474295650461476029217690309053232231297261798410695181616694314703997436338610984564069201725620796405296734380744790326182135344637059092267983690626441755526
#private_key = 83931743334395851194083979154350860473582308826803106514456052307672210325370643264908498901378450566509430217851810481535642531426038344741404876003886418497146559606497048661722017984834148751364121562097831936



class MessageHandler(asyncore.dispatcher_with_send):
    def __init__(self, sock):
        asyncore.dispatcher_with_send.__init__(self, sock)
        self.name = 0

    def handle_read(self):
        data = self.recv(4096).decode('utf-8')
        if data:
            print("loginfo: " + data)
            j = json.loads(data)

            if j["action"] == "register":
                try:
                    if not j["data"]["login"] in users.keys():

                            users[j["data"]["login"]] = j["data"]["pass"]
                            self.name = j["data"]["login"]
                            clients[self.name] = self
                            self.send(json.dumps({"action": "register", "status": "AUTH_OK"}).encode())
                    else:
                        self.send(json.dumps({"action": "register", "status": "AUTH_ERR"}).encode())
                        self.close()
                except Exception:
                    self.send(json.dumps({"action": "register", "status": "AUTH_ERR"}).encode())
                    self.close()

            elif j["action"] == "auth":
                try:
                    if users[j["data"]["login"]] == j["data"]["pass"]:
                        self.name = j["data"]["login"]
                        clients[self.name] = self
                        self.send(json.dumps({"action": "auth", "status": "AUTH_OK"}).encode())
                    else:
                        self.send(json.dumps({"action": "auth", "status": "AUTH_ERR"}).encode())
                        self.close()
                except Exception:
                    self.send(json.dumps({"action": "auth", "status": "AUTH_ERR"}).encode())
                    self.close()

            elif j["action"] == "message":
                try:
                    clients[j["data"]["to"]].send(json.dumps({"action": "message", "data":{"from": self.name, "message": j["data"]["message"]}}).encode())
                except Exception:
                    self.send(json.dumps({"action": "message", "status": "MESSAGE_ERR"}).encode())
            else:
                print("WATAFA")


class MessangerServer(asyncore.dispatcher):
    def __init__(self, host, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)

    def handle_accept(self):
        pair = self.accept()
        if pair is not None:
            sock, addr = pair
            print('Incoming connection from %s' % repr(addr))
            MessageHandler(sock)


server = MessangerServer('', 7777)
asyncore.loop()
